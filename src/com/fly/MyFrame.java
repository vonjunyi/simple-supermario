package com.fly;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class MyFrame extends JFrame implements KeyListener, Runnable{
	//储存所有背景
	private List<BackGround> allBg = new ArrayList<>();
	//储存当前背景
	private BackGround nowBg = new BackGround();
	//用于双缓存
	private Image offScreenImage = null;
	//马里奥对象
	private Mario mario = new Mario();
	//定义一个线程对象，用于实现马里奥的运动
	private Thread thread = new Thread(this);
	public MyFrame() {
		this.setSize(800, 600);
		
		this.setLocationRelativeTo(null);
		
		this.setVisible(true);
		
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		this.setResizable(true);
		
		this.addKeyListener(this);
		
		this.setTitle("FLY_superMario");
		//初始化图片
		StaticValue.init();
		//初始化马里奥
		mario = new Mario(10, 355); 
		//创建全部场景
		for(int i = 1; i <= 3; i++) {
			allBg.add(new BackGround(i, i == 3 ? true : false));
		}
		//第一个场景设置场景
		nowBg = allBg.get(0);
		mario.setBackGrund(nowBg);
		//绘制图像
		repaint();
		thread.start();
	}
	
	@Override
	public void paint(Graphics g) {
		// TODO Auto-generated method stub
		if (offScreenImage == null) {
			offScreenImage = createImage(800, 600);		
		}
		Graphics graphics = offScreenImage.getGraphics();
		graphics.fillRect(0, 0, 800, 600);
		
		//绘制背景
		graphics.drawImage(nowBg.getBgImage(), 0, 0, this);
		
		//绘制敌人
		for(Enemy e: nowBg.getEnemies()) {
			graphics.drawImage(e.getShow(), e.getX(), e.getY(), this);
		}
		//绘制障碍物
		for(Obstacle ob : nowBg.getObstacleList()) {
			graphics.drawImage(ob.getShow(), ob.getX(), ob.getY(), this);
		}
		
		//绘制城堡
		graphics.drawImage(nowBg.getTower(), 620, 270, this);
		
		//绘制旗杆
		graphics.drawImage(nowBg.getGan(), 500, 220, this);
		
		//绘制马里奥
		graphics.drawImage(mario.getShow(), mario.getX(), mario.getY(), this);
		
		//添加分数
		Color c = graphics.getColor();
		graphics.setColor(Color.BLACK);
		graphics.setFont(new Font("黑体", Font.BOLD, 25));
		graphics.drawString("当前的分数为" + mario.getScore(), 300, 100);
		graphics.setColor(c);
		
		//将图像绘制到窗口中
		g.drawImage(offScreenImage, 0, 0, this);
	}

	public static void main(String [] args) {
		MyFrame myFrame = new MyFrame();
	}
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		//向右移动
		if(e.getKeyCode() == 68) {
			mario.rightMove();
		}
		//向左移动
		if (e.getKeyCode() == 65) {
			mario.leftMove();
		}
		//跳跃
		if (e.getKeyCode() == 87) {
			mario.jump();
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		//向左停止
	if (e.getKeyCode() == 65) {
		mario.leftStop();
	}
		//向右停止
	if (e.getKeyCode() == 68) {
		mario.rightStop();
	}
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			repaint();
			try {
				Thread.sleep(50);
				if(mario.getX() >= 775) {
					nowBg = allBg.get(nowBg.getSort());
					mario.setBackGrund(nowBg);
					mario.setX(10);
					mario.setY(355);
				}
				
				//马里奥是否死亡
				if (mario.isDeath()) {
					JOptionPane.showMessageDialog(this, "游戏结束");
					System.exit(0);
				}
				
				//游戏是否结束
				if (mario.isOK()) {
					JOptionPane.showMessageDialog(this, "胜利");
					System.exit(0);
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	}
}
